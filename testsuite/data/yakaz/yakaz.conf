# vim:ft=yaml:

# CAUTION:
#   Unlike Apache mod_rewrite, if a rule matches, it's considered LAST!
#   If you want to continue with following rules, add a "goto: NEXT"
#   directive to the rule.
#
# CAUTION:
#   In regex, be sure to escape a backslash, otherwise, the YAML parser
#   will take it for him! For example, to escape a dot:
#     DO:     "\\."
#     DO NOT: "\."
#
# IMPORTANT:
#   A regression-check is included in the Otis project. When you add a
#   rule here, be sure to update this testsuite and run it! See:
#     https://redmine.yakaz.home/projects/otis/repository/revisions/master/show/testsuite/data/yakaz
#     https://git.yakaz.home/otis/tree/HEAD:/testsuite/data/yakaz

- name: Get real client IP address
  rule:
  # If the "X-Forwarded-For" header contains an IP address (weak check here)
  - match:
      $(header:X-Forwarded-For): "^[0-9a-f:.]+$"
  # And if the client IP address is local.
  - any:
    - eq:
        $(CLIENT_IP): 127.0.0.1
    - eq:
        $(CLIENT_IP): ::1
  # Set client IP address to the header's value and remove the header.
  - set:
      $(CLIENT_IP): $(header:X-Forwarded-For)
      $(header:X-Forwarded-For):

- name: Clean slashes
  rule:
  # To avoid redirect infinite loop, we first check if the path contains
  # multiple slashes in a row. This is because the "subst" directive
  # always succeeds.
  - match:
      $(PATH): "//+"
  - subst:
      $(PATH): "//+"
      value:   "/"
      flags:   g
  - response: 301

- name: Force FQDN
  rule:
  - match:
      $(header:host): "^[^.[]+$"
  - set:
      $(header:host): "$(header:host).yzserv.com"
  - response: 301

- name: Normalize host
  rule:
  - match:
      $(header:host): "^(?:yakaz|fokonz)\\."
  - set:
      $(header:host): "www.$(header:host)"
  - response: 301

- name: Components, sprites and CSS versioning
  rule:
  - any:
    - match:
        $(PATH): "^(/img/sp_.*)\\.[0-9]+(\\.png)"
        captures: [ $(prefix), $(suffix) ]
    - match:
        $(PATH): "^(/css/.*)\\.[0-9]+(\\.css)"
        captures: [ $(prefix), $(suffix) ]
    - match:
        $(PATH): "^(/component/.*)\\.[0-9]+(\\.js)"
        captures: [ $(prefix), $(suffix) ]
  - set:
      $(PATH): "$(prefix)$(suffix)"

- name: Redirect
  rule:
  - match:
      $(PATH): "^/[sr]/"
  - match:
      $(QUERY): ".+"
  # This rule assumes that the query string wasn't parsed by a previous
  # rule because the query string isn't of the form "param=value" but
  # contains raw data.
  - set:
      $(PATH): "/redirect.php"
      $(QUERY_backup): $(QUERY)                # Backup query string.
      $(QUERY):                                # Clear query string.
      $(query:p): $(QUERY_backup|unescape_uri) # Set a parameter.

- name: Neighbor profile (deprecated)
  rule:
  - match:
      $(PATH): "^/neighbors/([^/]+)/([^/]+)"
      captures: [ $(yuid), $(view) ]
  - any:
    - all:
      - eq:
          $(view): "recommend"
      - set:
          $(view): "followees"
    - all:
      - eq:
          $(view): "recommended"
      - set:
          $(view): "followers"
  - set:
      $(PATH): "/neighbors/$(yuid)/$(view)"
  - response: 301

- name: Neighbor profile
  rule:
  - match:
      # Captured strings go in the query string right away. Concerning
      # "view", if nothing is captured, the query parameter is
      # automatically removed.
      $(PATH): "^/neighbors/([^/]+)(?:$|/([^/]+)(?:$|/([^/]+)))"
      captures: [ $(query:yuid), $(query:view), $(query:filter) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:lo):  "3"

- name: Neighbor search
  rule:
  - eq:
      $(PATH): "/neighbors/"
  - set:
      $(PATH):        "/results.php"
      $(QUERY):       # Clear query string.
      $(query:mod):   "rewrite"
      $(query:match): "people"

- name: Ad page
  rule:
  - match:
      $(PATH): "^/posts/(.+)"
      captures: [ $(query:docid) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:lo):  "4"

- name: Place page without id
  rule:
  - match:
      $(PATH): "^/places/$"
  - set:
      $(PATH):      "/"
  - response: 302

- name: Place page
  rule:
  - match:
      $(PATH): "^/places/([^/]+)"
      captures: [ $(query:pid) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:lo):  "7"

- name: AJAX fallback
  rule:
  - not match:
      $(PATH): "^/ajax/.*.php"
  - match:
      $(PATH): "^/ajax(/.*)"
      captures: [ $(ajax_pi) ]
  - set:
      $(PATH): "/ajax/index.php$(ajax_pi)"

- rule:
  - match:
      $(PATH): "^/conv/(.*)$"
      captures: [ $(1) ]
  - set:
      $(PATH):     "/results.php"
      $(FRAGMENT): "focus=$(1)&lo=2"
  - response: 302

- rule:
  - match:
      $(PATH): "^/ws/online/([^-]+)-(?:[^.]+)\\.png$"
      captures: [ $(yuid) ]
  - set:
      $(PATH):         "/ws/online.yaws"
      $(QUERY):        # Clear query string.
      $(query:action): "online_img"
      $(query:user):   $(yuid)

- name: Skip known directories and webservices
  rule:
  - any:
    - eq:
        $(PATH): "/http-bind"
    - match:
        # Note the use of '\' to escape the newline. This permits to split
        # this long line.
        $(PATH):
          "^/(?:about|account|admin2plazzad\\!|ajax|component|css|error\
          |exec|extjs|facebook|font|frame|img|internalservice|js|lang\
          |link-exchange|magpierss|mobile|php|push|services|sound\
          |tools|twitter|webmasters\
          |wayne|ws|ejabberd_mod_smuc|token_bucket|fileuploader)/"

- rule:
  - match:
      $(PATH): "^/[0-9a-zA-Z-]+item-([0-9a-z]+)\\.htm$"
      captures: [ $(1) ]
  - set:
      $(PATH): "/item-$(1).htm"

- rule:
  - set:
      $(QUERY):
  - match:
      $(PATH): "^/([^._]*)_([^._]*)_([^._]*)\\.kml"
      captures: [ $(query:univ), $(query:what), $(query:where) ]
  - set:
      $(PATH): "/kml.php"

- rule:
  - any:
    - eq:
        $(header:accept): "text/vnd.wap.wml"
    - match:
        $(header:user-agent): "wap"
    - match:
        $(header:user-agent): "Nokia7110"
  - not match:
      $(PATH): "^/(?:mobi|img|favicon|rss|xml)"
  - set:
      $(PATH): "/mobi/"

- rule:
  - not any:
    - eq:
        $(header:accept): "text/vnd.wap.wml"
    - match:
        $(header:user-agent): "wap"
    - match:
        $(header:user-agent): "Nokia7110"
  - eq:
      $(PATH): "/mobi"
  - set:
      $(PATH): "/tools/mobile.php"
  - response: 302

- rule:
  - eq:
      $(PATH): "/ebaypartnernetworkactivation.txt"
  - set:
      $(PATH): "/ebaypartnernetworkactivation.php"

- rule:
  - eq:
      $(PATH): "/robots.txt"
  - set:
      $(PATH): "/robots.php"

- rule:
  - set:
      $(QUERY):
  - any:
    - all:
      - match:
          $(PATH): "^/item-([^.]+).htm"
          captures: [ $(query:post_uid) ]
      - set:
          $(query:kind): "ad"
    - all:
      - match:
          $(PATH): "^/profile-([^.]+).htm"
          captures: [ $(query:post_uid) ]
      - set:
          $(query:kind): "profile"
  - set:
      $(PATH):       "/item.php"
      $(query:mod):  "rewrite"

- global consts:
    $(univ_housing):    "(?:housing|property|immobilien|immobili|inmobiliario)"
    $(univ_cars):       "(?:auto|cars|autos|coches)"
    $(univ_motorbikes): "(?:moto|motorbikes|motorcycles|motorrader|motos)"
    $(univ_misc):       "(?:acheter-vendre|for-sale|in-vendita|kaufen-verkaufen|se-vende)"
    $(univ_jobs):       "(?:jobs|lavoro|empleo)"

- name: Handle popular searches
  rule:
  - set:
      $(QUERY):
  - any:
    - all:
      - match:
          $(PATH): "^/$(univ_housing)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "housing"
    - all:
      - match:
          $(PATH): "^/$(univ_cars)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "cars"
    - all:
      - match:
          $(PATH): "^/$(univ_motorbikes)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "motorbikes"
    - all:
      - match:
          $(PATH): "^/$(univ_misc)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "miscellaneous"
    - all:
      - match:
          $(PATH): "^/$(univ_jobs)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "jobs"
    - all:
      - match:
          $(PATH): "^/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "all"
  - set:
      $(PATH): "/popularsearches.php"

- name: Handle deprecated universe URIs
  rule:
  - any:
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.fr)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(auto|moto|acheter-vendre|immobilier|emploi)(/.*)"
          captures: [ $(univ), $(PATH) ]
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.co\\.uk)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(property|cars|motorbikes|jobs|for-sale)(/.*)"
          captures: [ $(univ), $(PATH) ]
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.com)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(housing|cars|motorcycles|jobs|for-sale)(/.*)"
          captures: [ $(univ), $(PATH) ]
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.es)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(inmobiliario|coches|motos|empleo|se-vende)(/.*)"
          captures: [ $(univ), $(PATH) ]
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.de)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(immobilien|autos|motorrader|jobs|kaufen-verkaufen)(/.*)"
          captures: [ $(univ), $(PATH) ]
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.it)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(immobili|auto|moto|lavoro|in-vendita)(/.*)"
          captures: [ $(univ), $(PATH) ]
    - all:
      - match:
          $(header:host): "^www\\.((?:yakaz|fokonz)\\.com\\.au)$"
          captures: [ $(domain) ]
      - match:
          $(PATH): "^/(housing|cars|motorcyles|jobs|for-sale)(/.*)"
          captures: [ $(univ), $(PATH) ]
  - set:
      $(header:host): "$(univ).$(domain)"
  - response: 301

- name: Handle universes
  rule:
  - set:
      $(QUERY):
  - any:
    - all:
      - match:
          $(PATH): "^/$(univ_housing)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "housing"
    - all:
      - match:
          $(PATH): "^/$(univ_cars)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "cars"
    - all:
      - match:
          $(PATH): "^/$(univ_motorbikes)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "motorbikes"
    - all:
      - match:
          $(PATH): "^/$(univ_misc)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "miscellaneous"
    - all:
      - match:
          $(PATH): "^/$(univ_jobs)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "jobs"
    - all:
      - match:
          $(PATH): "^/([^/]+)/([^/]*)$"
          captures: [ $(query:checkuniv), $(query:what) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:v):   "txt"

- rule:
  - not match:
      $(PATH): "\\.(?:php|xml|png|jpg|ico|html|htm|dtd)$"
  - match:
      $(PATH): "^/([^/]+)$"
      captures: [ $(query:what) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:v):   "txt"

- rule:
  - eq:
      $(QUERY):
  - match:
      $(PATH): "^/([a-zA-Z-]+[0-9+]*)\\.htm$"
      captures: [ $(query:where) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:v):   "txt"

#- global hooks:
#    rule init:   [ log: ">> $(RULE): EVAL\n"               ]
#    if continue: [ log: ">> $(RULE): MATCH, CONTINUE\n\n"  ]
#    if final:    [ log: ">> $(RULE): MATCH, FINAL:\n$(RESULT)\n-------------------------------------\n\n" ]
#    if abort:    [ log: ">> $(RULE): SKIP\n\n"             ]
