# vim:ft=yaml:

# CAUTION:
#   Unlike Apache mod_rewrite, if a rule matches, it's considered LAST!
#   If you want to continue with following rules, add a "goto: NEXT"
#   directive to the rule.
#
# CAUTION:
#   In regex, be sure to escape a backslash, otherwise, the YAML parser
#   will take it for him! For example, to escape a dot:
#     DO:     "\\."
#     DO NOT: "\."

- name: Clean slashes
  rule:
  # To avoid redirect infinite loop, we first check if the path contains
  # multiple slashes in a row. This is because the "subst" directive
  # always succeeds.
  - match:
      $(PATH): "//+"
  - subst:
      $(PATH): "//+"
      value:   "/"
      flags:   g
  - response: 301

#- name: Normalize host
#  desc: >
#    Permit the use of an IP address or a custom hostname to access the
#    website. The "Host:" header is automatically normalized to either
#    "www.yakaz.com" or "www.fokonz.com".
#  rule:
#  - set:
#      $(header:x-yakaz-original-host): $(header:host)
#  - any:
#    # If the host is an IP address, assume "www.fokonz.com".
#    # FIXME: Add IP parsing and support IPv6.
#    - all:
#      - match:
#          $(header:host): "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$"
#      - set:
#          $(header:host): "www.fokonz.com"
#    # If the host is a production Tweety, assume "www.yakaz.com".
#    - all:
#      - match:
#          $(header:host): "^tweety[0-9]+(?:\\.yakaz\\.com|)$"
#      - set:
#          $(header:host): "www.yakaz.com"
#    # If the host is a development Tweety, assume "www.fokonz.com".
#    - all:
#      - match:
#          $(header:host): "tweety[0-9]+(?:\\.(?:yakaz|fokonz)\\.com|)$"
#      - set:
#          $(header:host): "www.fokonz.com"
#    # If the host is under ".yakaz.home" or doesn't have a domain,
#    # assume "www.fokonz.com".
#    - all:
#      - any:
#        - match:
#            $(header:host): "\\.yakaz\\.home$"
#        - match:
#            $(header:host): "^[^.]+$"
#      - set:
#          $(header:host): "www.fokonz.com"
#    # If the host isn't a subdomain of "yakaz.com" or "fokonz.com",
#    # prepend "www.".
#    - all:
#      - match:
#          $(header:host): "^(?:yakaz|fokonz)\\."
#      - set:
#          $(header:host): "www.$(header:host)"
#    # Otherwise, force the host to "www.yakaz.com".
#    - all:
#      - not match:
#          $(header:host): "(?:yakaz|fokonz)\\."
#      - set:
#          $(header:host): "www.yakaz.com"
#  - any:
#    # Append port number if non-standard.
#    - all:
#      - set:
#          $(pouet): "SERVER"
#      - eq:
#          $(SCHEME): "http"
#      - eq:
#          $($(pouet)_PORT): 80
#    - all:
#      - eq:
#          $(SCHEME): "https"
#      - eq:
#          $(SERVER_PORT): 443
#    - set:
#        $(header:host): "$(header:host):$(SERVER_PORT)"
#  - goto: NEXT
- name: Normalize host
  rule:
  - match:
      $(header:host): "^(?:yakaz|fokonz)\."
  - set:
      $(header:host): "www.$(header:host)"

- name: Components, sprites and CSS versioning
  rule:
  - any:
    - match:
        $(PATH): "^(/img/sp_.*)\\.[0-9]+(\\.png)"
        captures: [ $(prefix), $(suffix) ]
    - match:
        $(PATH): "^(/css/.*)\\.[0-9]+(\\.css)"
        captures: [ $(prefix), $(suffix) ]
    - match:
        $(PATH): "^(/component/.*)\\.[0-9]+(\\.js)"
        captures: [ $(prefix), $(suffix) ]
  - set:
      $(PATH): "$(prefix)$(suffix)"

- name: Redirect
  rule:
  - match:
      $(PATH): "^/[sr]/"
  # This rule assumes that the query string wasn't parsed by a previous
  # rule because the query string isn't of the form "param=value" but
  # contains raw data.
  - set:
      $(PATH): "/redirect.php"
      $(QUERY_backup): $(QUERY)   # Backup query string.
      $(QUERY):                   # Clear query string.
      $(query:p): $(QUERY_backup) # Set a parameter.

- rule:
  - match:
      $(PATH): "^/imgv2-2/([0-9]+)/([0-9]+)/(big-|)([0-9]+-[0-9]+)\\.jpg$"
      captures: [ $(1), $(2), $(3), $(4) ]
  - set:
      $(RESP_URI): "http://media.yakaz.com/imgv2-2/miscellaneous/$(1)/$(2)/$(3)$(4).jpg"
  - response: 301

- name: Neighbor profile
  rule:
  - match:
      # Captured strings go in the query string right away. Concerning
      # "view", if nothing is captured, the query parameter is
      # automatically removed.
      $(PATH): "^/neighbors/([^/]+)(?:/?([^/]+)|)"
      captures: [ $(query:yuid), $(query:view) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:lo):  "3"

- name: Neighbor search
  rule:
  - eq:
      $(PATH): "/neighbors/"
  - set:
      $(PATH):        "/results.php"
      $(QUERY):       # Clear query string.
      $(query:mod):   "rewrite"
      $(query:match): "people"

- name: Ad page
  rule:
  - match:
      $(PATH): "^/posts/(.+)"
      captures: [ $(query:docid) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:lo):  "4"

- rule:
  - match:
      $(PATH): "^/conv/(.*)$"
      captures: [ $(1) ]
  - set:
      $(PATH):  "/results.php#focus=$(1)&lo=2&$(QUERY)"
      $(QUERY): # Clear query string.
  - response: 301

- rule:
  - match:
      $(PATH): "^/ws/online/([^-]+)-(?:[^.]+)\\.png$"
      captures: [ $(yuid) ]
  - set:
      $(PATH):         "/ws/online.yaws"
      $(QUERY):        # Clear query string.
      $(query:action): "online_img"
      $(query:user):   $(yuid)

- name: Skip known directories and webservices
  rule:
  - any:
    - eq:
        $(PATH): "/http-bind"
    - match:
        # Note the use of '\' to escape the newline. This permits to split
        # this long line.
        $(PATH):
          "^/(?:about|account|admin2plazzad\\!|ajax|component|css|error\
          |exec|extjs|facebook|font|frame|img|internalservice|js|lang\
          |link-exchange|magpierss|mobile|php|push|services|tools|webmasters\
          |wayne|ws|ejabberd_mod_smuc|token_bucket|fileuploader)/"

- rule:
  - match:
      $(PATH): "^/[0-9a-zA-Z\-]+item-([0-9a-z]+)\\.htm$"
      captures: [ $(1) ]
  - set:
      $(PATH): "/item-$(1).htm"

- rule:
  - set:
      $(QUERY):
  - match:
      $(PATH): "^/([^._]*)_([^._]*)_([^._]*)\\.kml"
      captures: [ $(query:univ), $(query:what), $(query:where) ]
  - set:
      $(PATH): "/kml.php"

- rule:
  - any:
    - eq:
        $(header:accept): "text/vnd.wap.wml"
    - match:
        $(header:user-agent): "wap"
    - match:
        $(header:user-agent): "Nokia7110"
  - not match:
      $(PATH): "^/(?:mobi|img|favicon|rss|xml)"
  - set:
      $(PATH): "/mobi/"

- rule:
  - not:
    - eq:
        $(header:accept): "text/vnd.wap.wml"
    - match:
        $(header:user-agent): "wap"
    - match:
        $(header:user-agent): "Nokia7110"
  - eq:
      $(PATH): "/mobi"
  - set:
      $(PATH): "/tools/mobile\.php"
  - response: 302

- rule:
  - eq:
      $(PATH): "/robots.txt"
  - set:
      $(PATH): "/robots.php"

- rule:
  - set:
      $(QUERY):
  - any:
    - all:
      - match:
          $(PATH): "^/item-([^.]+).htm"
          captures: [ $(query:post_uid) ]
      - set:
          $(query:kind): "ad"
    - all:
      - match:
          $(PATH): "^/profile-([^.]+).htm"
          captures: [ $(query:post_uid) ]
      - set:
          $(query:kind): "profile"
  - set:
      $(PATH):       "/item.php"
      $(query:mod):  "rewrite"

- name: Check fields
  desc: |
    If %{QUERY_STRING} "what=(&|$)"
    If %{QUERY_STRING} "where=(&|$)"
    If %{QUERY_STRING} "!sell-rent=[a-z]+(&|$)"
    If %{QUERY_STRING} "!rooms=[0-9]{1,2}(&|$)"
    If %{QUERY_STRING} "!kmax=[0-9]{1,6}+(&|$)"
    If %{QUERY_STRING} "!cyl=[0-9]{0,4}-[0-9]{0,4}(&|$)"
    If %{QUERY_STRING} "!an=[0-9]{0,4}-[0-9]{0,4}(&|$)"
    If %{QUERY_STRING} "!smin=[0-9]{0,4}(&|$)"
    If %{QUERY_STRING} "!smax=[0-9]{0,6}(&|$)"
    If %{QUERY_STRING} "!ct[\[][\]]=.+(&|$)"
    If %{QUERY_STRING} "!pg=[0-9]+(&|$)"
    If %{QUERY_STRING} "!mod=rewrite"
    Rewrite "^/results.php$" "/" [L]
  rule:
    - goto: NEXT

- global consts:
    $(univ_housing):    "(?:NONEFR|housing|property|immobilien|immobili|inmobiliario)"
    $(univ_cars):       "(?:auto|cars|autos|coches)"
    $(univ_motorbikes): "(?:moto|motorbikes|motorcycles|motorrader|motos)"
    $(univ_misc):       "(?:acheter-vendre|for-sale|in-vendita|kaufen-verkaufen|se-vende)"
    $(univ_jobs):       "(?:NONEFR|jobs|lavoro|empleo)"

- name: Handle popular searches
  rule:
  - set:
      $(QUERY):
  - any:
    - all:
      - match:
          $(PATH): "^/$(univ_housing)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "housing"
    - all:
      - match:
          $(PATH): "^/$(univ_cars)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "cars"
    - all:
      - match:
          $(PATH): "^/$(univ_motorbikes)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "motorbikes"
    - all:
      - match:
          $(PATH): "^/$(univ_misc)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "miscellaneous"
    - all:
      - match:
          $(PATH): "^/$(univ_jobs)/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "jobs"
    - all:
      - match:
          $(PATH): "^/popularsearches-([a-z])-(.*)$"
          captures: [ $(query:first), $(query:pg) ]
      - set:
          $(query:univ): "all"
  - set:
      $(PATH): "/popularsearches.php"

- name: Handle universes
  rule:
  - set:
      $(QUERY):
  - any:
    - all:
      - match:
          $(PATH): "^/$(univ_housing)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "housing"
    - all:
      - match:
          $(PATH): "^/$(univ_cars)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "cars"
    - all:
      - match:
          $(PATH): "^/$(univ_motorbikes)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "motorbikes"
    - all:
      - match:
          $(PATH): "^/$(univ_misc)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "miscellaneous"
    - all:
      - match:
          $(PATH): "^/$(univ_jobs)/([^/]*)$"
          captures: [ $(query:what) ]
      - set:
          $(query:univ): "jobs"
    - all:
      - match:
          $(PATH): "^/([^/]+)/([^/]*)$"
          captures: [ $(query:checkuniv), $(query:what) ]
      - set:
          $(query:univ): "all"
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:v):   "txt"

- rule:
  - not match:
      $(PATH): "\\.(?:php|xml|png|jpg|ico|html|htm|dtd)$"
  - match:
      $(PATH): "^/([^/]+)$"
      captures: [ $(query:what) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:v):   "txt"

- name: Last rule
  rule:
  - set:
      $(QUERY):
  - match:
      $(PATH): "^/([a-zA-Z-]+[0-9+]*)\\.htm$"
      captures: [ $(query:where) ]
  - set:
      $(PATH):      "/results.php"
      $(query:mod): "rewrite"
      $(query:v):   "txt"

#- global hooks:
#    rule init:   [ log: ">> $(RULE): EVAL\n"               ]
#    if continue: [ log: ">> $(RULE): MATCH, CONTINUE\n\n"  ]
#    if final:    [ log: ">> $(RULE): MATCH, FINAL:\n$(RESULT)\n-------------------------------------\n\n" ]
#    if abort:    [ log: ">> $(RULE): SKIP\n\n"             ]
